name: Terraform Compatibility Test

on:
  pull_request:
    paths:
      - "Dockerfile"
      - "cloudgoat/scenarios/**"
  workflow_dispatch:

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.set-matrix.outputs.scenarios }}
    steps:
      - name: Checkout full repository
        uses: actions/checkout@v3

      - name: Generate scenario list
        id: set-matrix
        run: |
          SCENARIOS=$(ls -1 cloudgoat/scenarios/ | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "scenarios=$SCENARIOS" >> $GITHUB_OUTPUT

  test:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # üî• Ensures all jobs run, even if some fail
      matrix:
        terraform_version: [
#          0.14.1, # Min Supported Version (README)
#          1.3.9,  # Current Dockerfile version
          1.5.0, # Should be min supported version?
          1.10.0, # Proposed new Dockerfile version
          1.11.1, # Latest version
        ]
        scenario: ${{ fromJson(needs.generate-matrix.outputs.scenarios) }}

    name: Terraform ${{ matrix.terraform_version }} - ${{ matrix.scenario }}

    steps:
      - name: Checkout full repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Terraform ${{ matrix.terraform_version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}

      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/config
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
          echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
          echo "region = $AWS_REGION" >> ~/.aws/config
          export AWS_PROFILE=default

      - name: Run Terraform Scenario - ${{ matrix.scenario }}
        run: |
          ROOT_DIR="$GITHUB_WORKSPACE"
          SCENARIO_DIR="$ROOT_DIR/cloudgoat/scenarios/${{ matrix.scenario }}/"

          echo "::group::Scenario: ${{ matrix.scenario }}"
          echo "Testing Terraform in $SCENARIO_DIR"

          # Ensure the scenario directory exists
          if [ ! -d "$SCENARIO_DIR" ]; then
            echo "‚ö†Ô∏è Skipping ${{ matrix.scenario }} (Directory not found)"
            exit 0
          fi

          cd "$SCENARIO_DIR"

          # Ensure whitelist.txt exists
          echo "1.1.1.1/32" > whitelist.txt

          # Only run start.sh if it exists
          if [ -f "start.sh" ]; then
            sh ./start.sh || { echo "‚ùå start.sh failed"; exit 1; }
          fi

          cd terraform

          # Detect required variables dynamically from .tf files
          REQUIRED_VARS=$(grep -ohP '(?<=var\.)[a-zA-Z0-9_]+' *.tf | sort -u)

          # Create temporary Terraform variables file (JSON format)
          TFVARS_FILE="terraform.auto.tfvars.json"
          echo "{" > $TFVARS_FILE

          # Define possible variables and values
          declare -A VAR_MAP
          VAR_MAP["cg_whitelist"]='["1.1.1.1/32"]'
          VAR_MAP["cgid"]='"github-ci-test"'
          VAR_MAP["profile"]='"default"'
          VAR_MAP["region"]='"us-east-1"'
          VAR_MAP["user_email"]='"cloudgoat@rhinosecuritylabs.com"'

          # Loop through required variables and add only those that exist
          for var in $REQUIRED_VARS; do
            if [[ -n "${VAR_MAP[$var]}" ]]; then
              echo "  \"$var\": ${VAR_MAP[$var]}," >> $TFVARS_FILE
            fi
          done

          # If cg_whitelist is defined in variables.tf and not already in tfvars add it
          if grep -q 'variable "cg_whitelist"' variables.tf && ! grep -q '"cg_whitelist"' "$TFVARS_FILE"; then
            var="cg_whitelist"
            echo "  \"$var\": ${VAR_MAP[$var]}," >> $TFVARS_FILE
          fi
          

          # Remove trailing comma and close JSON object
          sed -i '$ s/,$//' $TFVARS_FILE
          echo "}" >> $TFVARS_FILE

          # DEBUG: Print the generated tfvars file
          echo "Generated Terraform Variables:"
          cat $TFVARS_FILE

          # terraform init
          terraform init || { echo "‚ùå Init failed"; exit 1; }

          # terraform validate
          terraform validate || { echo "‚ùå Validation failed"; exit 1; }

          terraform plan -out=tfplan -input=false -var-file=$TFVARS_FILE || {
            echo "‚ùå Plan failed"; 
            terraform plan -no-color -var-file=$TFVARS_FILE;
            exit 1;
          }

          echo "‚úîÔ∏è Success: ${{ matrix.scenario }}"
          echo "::endgroup::"