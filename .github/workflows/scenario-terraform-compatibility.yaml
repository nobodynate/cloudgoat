name: Validate New Scenarios

on:
  pull_request:
    paths:
      - "cloudgoat/scenarios/**"
  workflow_dispatch:

jobs:
  detect-modified-scenarios:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.get-scenarios.outputs.scenarios }}
    steps:
      - name: Checkout full repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Ensures we can detect changes in the last commit

      - name: Detect Modified Scenarios
        id: get-scenarios
        run: |
          MODIFIED_SCENARIOS=$(git diff --name-only HEAD^ HEAD | grep -oE 'cloudgoat/scenarios/[^/]+' | sort -u | sed 's/cloudgoat\/scenarios\///' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "Detected modified scenarios: $MODIFIED_SCENARIOS"
          echo "scenarios=$MODIFIED_SCENARIOS" >> $GITHUB_OUTPUT

  validate-new-scenarios:
    needs: detect-modified-scenarios
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform_version: [1.5.0, 1.6.6]  # Min supported version + latest LTS
        scenario: ${{ fromJson(needs.detect-modified-scenarios.outputs.scenarios) }}

    name: Terraform ${{ matrix.terraform_version }} - ${{ matrix.scenario }}

    steps:
      - name: Checkout full repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Terraform ${{ matrix.terraform_version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}

      - name: Configure AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/config
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
          echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
          echo "region = $AWS_REGION" >> ~/.aws/config
          export AWS_PROFILE=default

      - name: Run Terraform Validation - ${{ matrix.scenario }}
        run: |
          ROOT_DIR="$GITHUB_WORKSPACE"
          SCENARIO_DIR="$ROOT_DIR/cloudgoat/scenarios/${{ matrix.scenario }}/"

          echo "::group::Validating Scenario: ${{ matrix.scenario }}"
          echo "Testing Terraform in $SCENARIO_DIR"

          if [ ! -d "$SCENARIO_DIR" ]; then
            echo "⚠️ Skipping ${{ matrix.scenario }} (Directory not found)"
            exit 0
          fi

          cd "$SCENARIO_DIR"

          echo "1.1.1.1/32" > whitelist.txt

          if [ -f "start.sh" ]; then
            sh ./start.sh || { echo "❌ start.sh failed"; exit 1; }
          fi

          cd terraform

          terraform init || { echo "❌ Init failed"; exit 1; }
          terraform validate || { echo "❌ Validation failed"; exit 1; }

          echo "✔️ Validation Successful: ${{ matrix.scenario }}"
          echo "::endgroup::"
