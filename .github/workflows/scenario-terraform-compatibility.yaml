name: Validate CloudGoat Scenarios

on:
  pull_request:
    paths:
      - 'cloudgoat/scenarios/**'

jobs:
  detect-scenarios:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.filter.outputs.scenarios }}
    steps:
      - uses: actions/checkout@v3

      - name: Get modified Terraform scenarios
        id: filter
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files -q '.files[].path')

          # Filter for terraform directories and extract cloud/provider paths
          SCENARIOS=$(echo "$FILES" \
            | grep -E '^cloudgoat/scenarios/[^/]+/[^/]+/terraform/' \
            | cut -d/ -f3,4 \
            | sort -u \
            | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "scenarios=$SCENARIOS" >> "$GITHUB_OUTPUT"

  validate:
    needs: detect-scenarios
    if: needs.detect-scenarios.outputs.scenarios != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform_version: [1.5.0, 1.6.6, 1.11.1]
        scenario: ${{ fromJson(needs.detect-scenarios.outputs.scenarios) }}
    name: Terraform ${{ matrix.terraform_version }} - ${{ matrix.scenario }}
    steps:
      - uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}

      - name: Validate Terraform for ${{ matrix.scenario }}
        run: |
          SCENARIO_DIR="cloudgoat/scenarios/${{ matrix.scenario }}/terraform"
          echo "Running Terraform validation in $SCENARIO_DIR"
          cd "$SCENARIO_DIR"

          echo '["1.1.1.1/32"]' > ../whitelist.txt
          terraform init -input=false
          terraform validate
