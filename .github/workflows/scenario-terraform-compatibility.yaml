name: Scenario Terraform validation

on:
  pull_request:
    paths:
      - 'cloudgoat/scenarios/**'

jobs:
  detect-modified-scenarios:
    runs-on: ubuntu-latest
    outputs:
      scenarios: ${{ steps.get-scenarios.outputs.scenarios }}
    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch base branch
        run: git fetch origin ${{ github.event.pull_request.base.ref }}

      - name: Get modified Terraform scenarios
        id: get-scenarios
        run: |
          FILES=$(git diff --name-only origin/${{ github.event.pull_request.base.ref }} HEAD)

          SCENARIOS=$(echo "$FILES" \
            | grep -E '^cloudgoat/scenarios/[^/]+/[^/]+/terraform/' \
            | cut -d/ -f3,4 \
            | sort -u \
            | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "scenarios=${SCENARIOS:-[]}" >> "$GITHUB_OUTPUT"

  validate-new-scenarios:
    needs: detect-modified-scenarios
    if: ${{ needs.detect-modified-scenarios.outputs.scenarios != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        terraform_version: [
          1.5.0,
          1.6.6,
          1.11.1,
        ]
        scenario: ${{ fromJson(needs.detect-modified-scenarios.outputs.scenarios || '[]') }}

    name: Terraform ${{ matrix.terraform_version }} - ${{ matrix.scenario }}

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Terraform ${{ matrix.terraform_version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.terraform_version }}

      - name: Run Terraform Validation - ${{ matrix.scenario }}
        run: |
          ROOT_DIR="$GITHUB_WORKSPACE"
          SCENARIO_DIR="$ROOT_DIR/cloudgoat/scenarios/${{ matrix.scenario }}"

          echo "::group::Testing Scenario: ${{ matrix.scenario }} with Terraform ${{ matrix.terraform_version }}"
          echo "Testing Terraform in $SCENARIO_DIR"
          if [ ! -d "$SCENARIO_DIR" ]; then
            echo "⚠️ Skipping ${{ matrix.scenario }} (Directory not found)"
            exit 1
          fi
          cd "$SCENARIO_DIR"

          if [ -f "start.sh" ]; then
            sh ./start.sh || { echo "❌ start.sh failed"; exit 1; }
          fi

          cd terraform

          terraform init || { echo "❌ Init failed"; exit 1; }
          terraform validate || { echo "❌ Validation failed"; exit 1; }
          echo "✔️ Success: ${{ matrix.scenario }}"
          echo "::endgroup::"
